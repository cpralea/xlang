# Tokens
whitespace      = [ \r\t]
separator       = \n
identifier      = [_a-zA-Z][_a-zA-Z0-9]*
integer         = 0 | [1-9][0-9]*
string          = ".*"
boolean         = kw:true | kw:false
kw:true         = true
kw:false        = false
kw:print        = print
op:assignment   = =
op:not          = !
op:add          = +
op:sub          = -
op:mul          = *
op:div          = /
op:and          = &&
op:or           = ||
op:eq           = ==
op:ne           = !=
op:lt           = <
op:le           = <=
op:gt           = >
op:ge           = >=
lparen          = (
rparen          = )

# Grammar
program         = statement*
statement       = assignment | print
assignment      = identifier op:assignment expression
print           = kw:print expression
expression      = exp:l4
exp:l4          = exp:l3 ((op:eq | op:ne ) exp:l3)?
exp:l3          = exp:l2 ((op:lt | op:le | op:gt | op:ge ) exp:l2)?
exp:l2          = exp:l1 ((op:add | op:sub | op:or) exp:l1)?
exp:l1          = exp:l0 ((op:mul | op:div | op:and) exp:l0)?
exp:l0          = (op:sub | op:not)? identifier
                | op:sub? integer
                | string
                | op:not? boolean
                | lparen expression rparen
