[Debug]: Configuration:
[Debug]:   (Configuration:
[Debug]:     Options: '(
[Debug]:       'no-output:true',
[Debug]:       'output:tests/xl/assignments.ll',
[Debug]:       'verbose:true')',
[Debug]:     File: 'tests/xl/assignments.xl')
[Debug]: Parsed tokens:
[Debug]:   (Token: Value: 'b', Identifier@1,1)
[Debug]:   (Token: Value: '=', Assign@1,3)
[Debug]:   (Token: Value: 'true', Boolean@1,5)
[Debug]:   (Token: Value: '\n', Separator@1,9)
[Debug]:   (Token: Value: 'print', Print@2,1)
[Debug]:   (Token: Value: 'b', Identifier@2,7)
[Debug]:   (Token: Value: '\n', Separator@2,8)
[Debug]:   (Token: Value: 'b', Identifier@3,1)
[Debug]:   (Token: Value: '=', Assign@3,3)
[Debug]:   (Token: Value: 'false', Boolean@3,5)
[Debug]:   (Token: Value: '\n', Separator@3,10)
[Debug]:   (Token: Value: 'print', Print@4,1)
[Debug]:   (Token: Value: 'b', Identifier@4,7)
[Debug]:   (Token: Value: '\n', Separator@4,8)
[Debug]:   (Token: Value: 's', Identifier@5,1)
[Debug]:   (Token: Value: '=', Assign@5,3)
[Debug]:   (Token: Value: 'ok', String@5,5)
[Debug]:   (Token: Value: '\n', Separator@5,9)
[Debug]:   (Token: Value: 'print', Print@6,1)
[Debug]:   (Token: Value: 's', Identifier@6,7)
[Debug]:   (Token: Value: '\n', Separator@6,8)
[Debug]:   (Token: Value: 'i', Identifier@7,1)
[Debug]:   (Token: Value: '=', Assign@7,3)
[Debug]:   (Token: Value: '0', Integer@7,5)
[Debug]:   (Token: Value: '\n', Separator@7,6)
[Debug]:   (Token: Value: 'print', Print@8,1)
[Debug]:   (Token: Value: 'i', Identifier@8,7)
[Debug]:   (Token: Value: '\n', Separator@8,8)
[Debug]: Parsed program:
[Debug]:   (Node: Program, @N/A
[Debug]:     Statements:
[Debug]:       (Node: Assignment, @(Token: Value: 'b', Identifier@1,1)
[Debug]:         Identifier: b
[Debug]:         Expression:
[Debug]:           (Node: Expression, @(Token: Value: 'true', Boolean@1,5)
[Debug]:             Boolean: true))
[Debug]:       (Node: Print, @(Token: Value: 'print', Print@2,1)
[Debug]:         Expression:
[Debug]:           (Node: Expression, @(Token: Value: 'b', Identifier@2,7)
[Debug]:             Identifier: b))
[Debug]:       (Node: Assignment, @(Token: Value: 'b', Identifier@3,1)
[Debug]:         Identifier: b
[Debug]:         Expression:
[Debug]:           (Node: Expression, @(Token: Value: 'false', Boolean@3,5)
[Debug]:             Boolean: false))
[Debug]:       (Node: Print, @(Token: Value: 'print', Print@4,1)
[Debug]:         Expression:
[Debug]:           (Node: Expression, @(Token: Value: 'b', Identifier@4,7)
[Debug]:             Identifier: b))
[Debug]:       (Node: Assignment, @(Token: Value: 's', Identifier@5,1)
[Debug]:         Identifier: s
[Debug]:         Expression:
[Debug]:           (Node: Expression, @(Token: Value: 'ok', String@5,5)
[Debug]:             String: ok))
[Debug]:       (Node: Print, @(Token: Value: 'print', Print@6,1)
[Debug]:         Expression:
[Debug]:           (Node: Expression, @(Token: Value: 's', Identifier@6,7)
[Debug]:             Identifier: s))
[Debug]:       (Node: Assignment, @(Token: Value: 'i', Identifier@7,1)
[Debug]:         Identifier: i
[Debug]:         Expression:
[Debug]:           (Node: Expression, @(Token: Value: '0', Integer@7,5)
[Debug]:             Integer: 0))
[Debug]:       (Node: Print, @(Token: Value: 'print', Print@8,1)
[Debug]:         Expression:
[Debug]:           (Node: Expression, @(Token: Value: 'i', Identifier@8,7)
[Debug]:             Identifier: i)))
[Debug]: Compiler data:
[Debug]:   Parent:
[Debug]:     (Node: Program, @N/A)
[Debug]:   Execution steps:
[Debug]:     (Node: Expression, @(Token: Value: 'true', Boolean@1,5)): Bool
[Debug]:     (Node: Assignment, @(Token: Value: 'b', Identifier@1,1)): Bool
[Debug]:     (Node: Expression, @(Token: Value: 'b', Identifier@2,7)): Bool
[Debug]:     (Node: Print, @(Token: Value: 'print', Print@2,1)): Nil
[Debug]:     (Node: Expression, @(Token: Value: 'false', Boolean@3,5)): Bool
[Debug]:     (Node: Assignment, @(Token: Value: 'b', Identifier@3,1)): Bool
[Debug]:     (Node: Expression, @(Token: Value: 'b', Identifier@4,7)): Bool
[Debug]:     (Node: Print, @(Token: Value: 'print', Print@4,1)): Nil
[Debug]:     (Node: Expression, @(Token: Value: 'ok', String@5,5)): Str
[Debug]:     (Node: Assignment, @(Token: Value: 's', Identifier@5,1)): Str
[Debug]:     (Node: Expression, @(Token: Value: 's', Identifier@6,7)): Str
[Debug]:     (Node: Print, @(Token: Value: 'print', Print@6,1)): Nil
[Debug]:     (Node: Expression, @(Token: Value: '0', Integer@7,5)): Int
[Debug]:     (Node: Assignment, @(Token: Value: 'i', Identifier@7,1)): Int
[Debug]:     (Node: Expression, @(Token: Value: 'i', Identifier@8,7)): Int
[Debug]:     (Node: Print, @(Token: Value: 'print', Print@8,1)): Nil
[Debug]: Code:
[Debug]:   ; String literals.
[Debug]:   @0 = private unnamed_addr constant [3 x i8] c"ok\00", align 1
[Debug]:   
[Debug]:   ; Program entry point.
[Debug]:   define i32 @main() {
[Debug]:   entry:
[Debug]:     ; Variables.
[Debug]:     %b = alloca i8, align 8
[Debug]:     %s = alloca i8*, align 8
[Debug]:     %i = alloca i64, align 8
[Debug]:     ; Statements.
[Debug]:     store i8 1, i8* %b, align 1
[Debug]:     %0 = load i8, i8* %b, align 1
[Debug]:     call void @__xlrt_print_bool(i8 %0)
[Debug]:     store i8 0, i8* %b, align 1
[Debug]:     %1 = load i8, i8* %b, align 1
[Debug]:     call void @__xlrt_print_bool(i8 %1)
[Debug]:     store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i8** %s, align 8
[Debug]:     %2 = load i8*, i8** %s, align 8
[Debug]:     call void @__xlrt_print_str(i8* %2)
[Debug]:     store i64 0, i64* %i, align 8
[Debug]:     %3 = load i64, i64* %i, align 8
[Debug]:     call void @__xlrt_print_int(i64 %3)
[Debug]:     ; Return.
[Debug]:     ret i32 0
[Debug]:   }
[Debug]:   
[Debug]:   ; X language runtime symbols.
[Debug]:   declare void @__xlrt_print_bool(i8)
[Debug]:   declare void @__xlrt_print_int(i64)
[Debug]:   declare void @__xlrt_print_str(i8*)
[Debug]:   
